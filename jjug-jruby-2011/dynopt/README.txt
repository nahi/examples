# Plain JRuby
jruby fib_recursive.rb 5 35

# JRuby + Dynamic Optimization (off by default in JRuby 1.6)
jruby -Xcompile.dynopt=true fib_recursive.rb 5 35

## invokedynamic comparison (needs JDK7-ea)
## -XX:blah options are needed to enable invokedynamic feature of JDK7.
## It should not be needed in the released version of JDK7.
#
# Plain JRuby
jruby -X+C -Xcompile.invokedynamic=false -J-XX:+UnlockExperimentalVMOptions -J-XX:+EnableInvokeDynamic -J-XX:MaxInlineSize=150 -J-XX:InlineSmallCode=5000 bench_tak.rb 5
# dynopt
jruby -Xcompile.dynopt=true -J-XX:+UnlockExperimentalVMOptions -J-XX:+EnableInvokeDynamic -J-XX:MaxInlineSize=150 -J-XX:InlineSmallCode=5000 bench_tak.rb 5
# invokedynamic
jruby -X+C -Xcompile.invokedynamic=true -J-XX:+UnlockExperimentalVMOptions -J-XX:+EnableInvokeDynamic -J-XX:MaxInlineSize=150 -J-XX:InlineSmallCode=5000 bench_tak.rb 5

# Try to attach a JRuby + invokedynamic process using VisualVM.
# You'll see MethodHandle instead of JRuby's CallSite in CPU sampling result.

## To see generated bytecodes;
# Plain JRuby
jruby -Xjit.dumping=true -rfib_recursive -e 0 1
# dynopt
jruby -Xcompile.dynopt=true -Xjit.dumping=true -rfib_recursive -e 0 1
# invokedynamic
jruby -Xcompile.invokedynamic=true -J-XX:+UnlockExperimentalVMOptions -J-XX:+EnableInvokeDynamic -J-XX:MaxInlineSize=150 -J-XX:InlineSmallCode=5000 -Xjit.dumping=true -rfib_recursive.rb -e 0 1 30
